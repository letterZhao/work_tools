#查询所有topic
kafka-topics.sh  --zookeeper 172.20.0.3:2181 --list

#查看topic详情
kafka-topics.sh  --zookeeper 172.20.0.3:2181 --describe --topic topic_db

#删除topic
kafka-topics.sh  --zookeeper 172.20.0.3:2181 --delete --topic topic_db




# 进入zookeeper容器
docker exec -it 容器名 /bin/sh

# 进入zookeeper客户端，不同的zookeeper版本进入方式可能不同
./bin/zkCli.sh

# 查看topics数据
./zkCli.sh ls /brokers/topics

# 找到要删除的topic，执行命令：rmr /brokers/topics/【topic name】即可，此时topic被彻底删除。
./zkCli.sh rmr /brokers/topics/topic_db
./zkCli.sh rmr /admin/delete_topics/topic_db
./zkCli.sh rmr /config/topics/topic_db


#Created topic app.
kafka-topics.sh  --zookeeper 172.20.0.3:2181 --create --replication-factor 1 --partitions 3 --topic topic_db

--zookeeper 表示ZK地址，可以传递多个，用逗号分隔 IP:PORT,IP:PORT,IP:PORT/kafka
--replication-factor 表示副本数量，这里的数量是包含Leader副本和Follower副本，副本数量不能超过代理数量
--partitions 表示主题的分区数量，必须传递该参数。Kafka的生产者和消费者采用多线程并行对主题的消息进行处理，每个线程处理一个分区，分区越多吞吐量就会越大，但是分区越多也意味着需要打开更多的文件句柄数量，这样也会带来一些开销。

#测试
kafka-console-producer.sh --broker-list 172.20.0.4:9092 --topic topic_db

#kafka启动关闭命令
nohup bin/kafka-server-start.sh config/server.properties >/dev/null 2>&1 & 
bin/kafka-server-stop.sh


#zookeeper
开启zookeeper命令(备注：先进入zookeeper的bin目录)
./zkServer.sh start

关闭zookeeper命令(备注：先进入zookeeper的bin目录)
./zkServer.sh stop
